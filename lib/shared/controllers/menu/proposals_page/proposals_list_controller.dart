import 'package:miro/blocs/widgets/kira/kira_list/abstract_list/controllers/i_list_controller.dart';
import 'package:miro/infra/services/cache/favourites_cache_service.dart';
import 'package:miro/shared/models/proposals/proposal_model.dart';
import 'package:miro/shared/models/proposals/proposal_status.dart';
import 'package:miro/shared/models/proposals/proposal_type.dart';
import 'package:miro/shared/models/proposals/types/proposal_assign_permission_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_assign_role_to_account_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_blacklist_role_permission_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_create_role_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_remove_blacklisted_role_permission_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_reset_whole_councilor_rank_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_set_network_property/network_property_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_set_network_property/proposal_set_network_property_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_set_poor_network_messages_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_software_upgrade/proposal_software_upgrade_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_software_upgrade/software_upgrade_resource_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_upsert_data_registry_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_upsert_token_alias_model.dart';
import 'package:miro/shared/models/proposals/types/proposal_whitelist_role_permission_model.dart';
import 'package:miro/shared/utils/list_utils.dart';

class ProposalsListController implements IListController<ProposalModel> {
  final FavouritesCacheService favouritesCacheService = FavouritesCacheService(domainName: 'proposals');

  @override
  FavouritesCacheService getFavouritesCacheService() {
    return favouritesCacheService;
  }

  @override
  Future<List<ProposalModel>> getFavouritesData() async {
    return <ProposalModel>[];
  }

  @override
  Future<List<ProposalModel>> getPageData(int pageIndex, int offset, int limit) async {
    List<ProposalModel> proposalList = <ProposalModel>[
      ProposalModel(
        proposalTypeContentModel: const ProposalUpsertTokenAliasModel(
          proposalType: ProposalType.upsertTokenAlias,
          decimals: 6,
          denoms: <String>['ukex'],
          icon: 'http://kira-network.s3-eu-west-1.amazonaws.com/assets/img/tokens/kex.svg',
          name: 'KIRA',
          symbol: 'KEX',
          invalidatedBool: false,
        ),
        description: 'description',
        transactionHash: '0xb50a9cf774ca9762558cce61d992ca1fbe7ed7d4',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'Accept this proposal, thanks',
        minEnactmentEndBlockHeight: '1',
        minVotingEndBlockHeight: '2',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 1,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_UNKNOWN'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Upsert KEX icon URL link',
        votersCount: 30,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalSoftwareUpgradeModel(
          proposalType: ProposalType.softwareUpgrade,
          instateUpgradeBool: true,
          maxEnrolmentDuration: '666',
          memo: 'Genesis Setup Plan',
          name: 'genesis',
          newChainId: 'localnet-4',
          oldChainId: 'localnet-4',
          rebootRequiredBool: true,
          softwareUpgradeResourceModelList: <SoftwareUpgradeResourceModel>[SoftwareUpgradeResourceModel(checksum: '', id: 'kira', url: 'https://github.com/KiraCore/kira/releases/download/v0.11.21/kira.zip', version: '')],
          rollbackChecksum: 'genesis',
          skipHandlerBool: true,
          upgradeTime: '1685020552',
        ),
        description: 'Software upgrade',
        transactionHash: '0xc3bc56239fc153a6e9ef41b4d95a9b6a10682d63',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'When mainnet?',
        minEnactmentEndBlockHeight: '3',
        minVotingEndBlockHeight: '4',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 2,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_PASSED'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Software upgrade to ChaosNet',
        votersCount: 50,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalUpsertDataRegistryModel(
          proposalType: ProposalType.upsertDataRegistry,
          encoding: 'picture',
          hash: '891bd9d3b2ee0c6eed43a8129b096bebc7e5ae517d0b855b2116a3205211fe21',
          key: 'icon',
          reference: 'https://kira-network.s3-eu-west-1.amazonaws.com/assets/img/tokens/kex.svg',
          size: '1597',
        ),
        description: 'description',
        transactionHash: '0xf969c7d1f71c05cf009623086c2b93605b3c27dd',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'REF#544561324645465',
        minEnactmentEndBlockHeight: '5',
        minVotingEndBlockHeight: '6',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 3,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_REJECTED'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Upsert KEX icon URL link',
        votersCount: 40,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalAssignPermissionModel(
          proposalType: ProposalType.assignPermission,
          address: 'exampleAddress',
          permission: 1,
        ),
        description: 'description',
        transactionHash: '0xd033b16b4a2598eece41717e9395555b8f92e32a',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'REF#544561324645465',
        minEnactmentEndBlockHeight: '7',
        minVotingEndBlockHeight: '8',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 4,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_REJECTED_WITH_VETO'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Assign Permission to Validator 2',
        votersCount: 45,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalSetNetworkPropertyModel(
          proposalType: ProposalType.setNetworkProperty,
          networkProperty: 'MIN_TX_FEE',
          networkPropertyModel: NetworkPropertyModel(strValue: '', value: '99'),
        ),
        description: 'description',
        transactionHash: '0xfa84815a206b6d7adabe773af9d19ed21a4cfa21',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'REF#544561324645465',
        minEnactmentEndBlockHeight: '9',
        minVotingEndBlockHeight: '10',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 5,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_PENDING'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Set Network Property to X',
        votersCount: 32,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalCreateRoleModel(
          proposalType: ProposalType.createRole,
          blacklistedPermissions: <String>[
            'PERMISSION_CREATE_CREATE_ROLE_PROPOSAL',
            'PERMISSION_VOTE_CREATE_ROLE_PROPOSAL',
          ],
          roleDescription: "''Bruh'(3) role'",
          roleSid: 'bruh3',
          whitelistedPermissions: <String>[
            'PERMISSION_CREATE_UNJAIL_VALIDATOR_PROPOSAL',
            'PERMISSION_VOTE_UNJAIL_VALIDATOR_PROPOSAL',
          ],
        ),
        description: 'description',
        transactionHash: '0xb136376b24310133032e667b75dece9e06105265',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '11',
        minVotingEndBlockHeight: '12',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 6,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_QUORUM_NOT_REACHED'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Need new Role for Governing Validators',
        votersCount: 49,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalBlacklistRolePermissionModel(
          proposalType: ProposalType.blacklistRolePermission,
          permission: 'PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL',
          roleIdentifier: '3',
        ),
        description: 'description',
        transactionHash: '0xb136376b24310133032e667b75dece9e06105265',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        execResult: '"executed successfully"',
        metaData: 'REF#544561324645465',
        minEnactmentEndBlockHeight: '13',
        minVotingEndBlockHeight: '14',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 7,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_ENACTMENT'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Blacklist Role Permission',
        votersCount: 31,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalAssignRoleToAccountModel(
          proposalType: ProposalType.assignRoleToAccount,
          address: '93IDMt+KI+CnCHWAZlhz1GSfySw=',
          roleIdentifier: '4',
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 8,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_PASSED_WITH_EXEC_FAIL'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Assigning Role to Validator example',
        votersCount: 29,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:51.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalRemoveBlacklistedRolePermissionModel(
          proposalType: ProposalType.removeBlacklistedRolePermission,
          permission: 'PERMISSION_CREATE_UPSERT_DATA_REGISTRY_PROPOSAL',
          roleSid: 'bruh',
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 9,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_UNKNOWN'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Remove Blacklisted Role Permissions',
        votersCount: 35,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:59.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalWhitelistRolePermissionModel(
          proposalType: ProposalType.whitelistRolePermission,
          permission: 'PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL',
          roleIdentifier: '3',
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 10,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_PASSED_WITH_EXEC_FAIL'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'WhiteList Role Permissions',
        votersCount: 39,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:60.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalSetPoorNetworkMessagesModel(
          proposalType: ProposalType.setPoorNetworkMessages,
          messages: <String>['xxx.yyy'],
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 11,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_PASSED'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Upgrade Poor Network Message',
        votersCount: 45,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:61.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalResetWholeCouncilorRankModel(
          proposalType: ProposalType.resetWholeCouncilorRank,
          description: '',
          proposer: 'ZtzUOqrXZFSaMUg5Da0aHqhCcxs',
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 12,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_PENDING'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Reset a Councilor from their rank',
        votersCount: 35,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:61.893680415Z'),
      ),
      ProposalModel(
        proposalTypeContentModel: const ProposalSetPoorNetworkMessagesModel(
          proposalType: ProposalType.setPoorNetworkMessages,
          messages: <String>['xxx.yyy'],
        ),
        description: 'description',
        transactionHash: '0xf2cdd6c4e17e640fc1a2e833ef534c554f661548',
        enactmentEndTime: DateTime.parse('2023-05-25T13:11:51.893680415Z'),
        metaData: 'REF#544561324645465',
        execResult: '"executed successfully"',
        minEnactmentEndBlockHeight: '15',
        minVotingEndBlockHeight: '16',
        proposer: '0x1351bae10fd0bf6500a437ee717a8ae79aae2a21',
        proposalId: 13,
        quorum: '33%',
        proposalStatus: ProposalStatus.fromString('VOTE_RESULT_REJECTED'),
        submitTime: DateTime.parse('2023-05-25T13:00:51.893680415Z'),
        title: 'Upgrade Poor Network Message',
        votersCount: 35,
        votesCount: 50,
        votingEndTime: DateTime.parse('2023-05-25T13:06:61.893680415Z'),
      ),
    ];
    return ListUtils.getSafeSublist(list: proposalList, start: offset, end: limit);
  }
}
