// Mocks generated by Mockito 5.4.4 from annotations
// in miro/test/unit/blocs/generic/metamask/metamask_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:flutter_web3/flutter_web3.dart' as _i3;
import 'package:miro/blocs/generic/auth/auth_cubit.dart' as _i5;
import 'package:miro/blocs/generic/metamask/ethereum_provider.dart' as _i2;
import 'package:miro/shared/models/wallet/wallet.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EthereumProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockEthereumProvider extends _i1.Mock implements _i2.EthereumProvider {
  @override
  bool get isSupported => (super.noSuchMethod(
        Invocation.getter(#isSupported),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void removeAllListeners() => super.noSuchMethod(
        Invocation.method(
          #removeAllListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleConnect(void Function(_i3.ConnectInfo)? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #handleConnect,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleDisconnect(void Function(_i3.ProviderRpcError)? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #handleDisconnect,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleAccountsChanged(void Function(List<String>)? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #handleAccountsChanged,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleChainChanged(void Function(int)? listener) => super.noSuchMethod(
        Invocation.method(
          #handleChainChanged,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<String>?> requestAccount() => (super.noSuchMethod(
        Invocation.method(
          #requestAccount,
          [],
        ),
        returnValue: _i4.Future<List<String>?>.value(),
        returnValueForMissingStub: _i4.Future<List<String>?>.value(),
      ) as _i4.Future<List<String>?>);

  @override
  _i4.Future<int?> getChainId() => (super.noSuchMethod(
        Invocation.method(
          #getChainId,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
        returnValueForMissingStub: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<void> switchWalletChain(int? chainId) => (super.noSuchMethod(
        Invocation.method(
          #switchWalletChain,
          [chainId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addWalletChain({
    required int? chainId,
    required String? rpcUrl,
    required String? chainName,
    required String? nativeCurrencyName,
    required String? nativeCurrencySymbol,
    required int? nativeCurrencyDecimals,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWalletChain,
          [],
          {
            #chainId: chainId,
            #rpcUrl: rpcUrl,
            #chainName: chainName,
            #nativeCurrencyName: nativeCurrencyName,
            #nativeCurrencySymbol: nativeCurrencySymbol,
            #nativeCurrencyDecimals: nativeCurrencyDecimals,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i5.AuthCubit {
  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<_i6.Wallet?> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i6.Wallet?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i6.Wallet?>.empty(),
      ) as _i4.Stream<_i6.Wallet?>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> signIn(_i6.Wallet? wallet) => (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [wallet],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void toggleWalletAddress() => super.noSuchMethod(
        Invocation.method(
          #toggleWalletAddress,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.Wallet? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i6.Wallet?>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
